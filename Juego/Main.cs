// empezamos creando el paquete Math que nos ayudar√° a generar la posici√≥n aleatoria de la Mosca.
using Math;

// opciones men√∫ principal, declaras como const globales para mejorar la legibilidad y mantenibilidad del c√≥digo
const int OPCION_MENU_PRINCIPAL_JUGAR = 1;
const int OPCION_MENU_PRINCIPAL_COMO_JUGAR = 2;
const int OPCION_MENU_PRINCIPAL_SALIR = 3;

// opciones para elegir la dificultad del juego
const int OPCION_MENU_JUEGO_FACIL = 1;
const int OPCION_MENU_JUEGO_MEDIO = 2;
const int OPCION_MENU_JUEGO_DIFICIL = 3;
const int OPCION_MENU_JUEGO_MAESTRO = 4;
const int OPCION_MENU_JUEGO_IMPOSIBLE = 5;
const int OPCION_MENU_JUEGO_ESTADISTICAS = 6;
const int OPCION_MENU_JUEGO_SALIR = 7;

// --------- tama√±os de los paneles seg√∫n dificultad ---------
// F√ÅCIL
const int FILAS_PANEL_FACIL = 6;
const int COLUMNAS_PANEL_FACIL = 6;  
// MEDIO
const int FILAS_PANEL_MEDIO = 7;
const int COLUMNAS_PANEL_MEDIO = 7;  
// DIF√çCIL
const int FILAS_PANEL_DIFICIL = 8;
const int COLUMNAS_PANEL_DIFICIL = 8;  
// MAESTRO
const int FILAS_PANEL_MAESTRO = 10;
const int COLUMNAS_PANEL_MAESTRO = 10;  
// IMPOSIBLE
const int FILAS_PANEL_IMPOSIBLE = 15;
const int COLUMNAS_PANEL_IMPOSIBLE = 15;  

// --------- vidas seg√∫n dificultad ---------
// F√ÅCIL
const int VIDAS_FACIL = 1;
// MEDIO
const int VIDAS_MEDIO = 2;
// DIF√çCIL
const int VIDAS_DIFICIL = 2;
// MAESTRO
const int VIDAS_MAESTRO = 3;
// IMPOSIBLE
const int VIDAS_IMPOSIBLE = 5;

// --------- probabilidad de defensa ---------
const decimal PROBABILIDAD_PROTECCION_DIFICIL = 0.10; // 10%
const decimal PROBABILIDAD_PROTECCION_MAESTRO = 0.15; // 15%
const decimal PROBABILIDAD_PROTECCION_IMPOSIBLE = 0.50; // 50%

// valores iniciales
const int VICTORIAS_INICIALES = 0;
const int PARTIDAS_INICIALES = 0;
const int INTENTOS_INICIALES = 0;

/*
Funci√≥n Main. Es por donde se empieza a ejecutar el programa y se encarga de dar la bienvenida.
Despu√©s de la bienvenida comienza la simulaci√≥n, empezando por el men√∫ principal del juego.
*/
Main {
    writeLine("--ü¶ü Bienvenid@ al Minijuego de la Mosca ü¶ü--");
    ejecutarMenuPrincipal();
    writeLine("Fin del programa.");
}

/*
Gestiona el men√∫ principal de la simulaci√≥n. Se repite hasta que el usuario decida acabar con esta seleccionando salir
*/
procedure ejecutarMenuPrincipal() {
    // variable que almacena la opcion que elige el usuario del men√∫, inicializada al 0 para prevenir errores y garantizar la entrada
    int opcionElegida = 0;

    do {

        // men√∫
        writeLine("---- MEN√ö PRINCIPAL ----");
        writeLine(OPCION_MENU_PRINCIPAL_JUGAR + ".- Entrar al juego üëæ"); // 1
        writeLine(OPCION_MENU_PRINCIPAL_COMO_JUGAR + ".- ¬øC√≥mo se juega? ü§∑‚Äç‚ôÄÔ∏è"); // 2
        writeLine(OPCION_MENU_PRINCIPAL_SALIR + ".- Salir üòî"); // 3

        // 1a capa de validaci√≥n: que no se introduzca texto
        opcionElegida = leerEntero("Opci√≥n elegida: "); 
        writeLine("---------------------------------");

        switch(opcionElegida) {
            case OPCION_MENU_PRINCIPAL_JUGAR: // 1
                seleccionarDificultad();
                break;

            case OPCION_MENU_PRINCIPAL_COMO_JUGAR: // 2
                mostrarInstrucciones();
                break; 

            case OPCION_MENU_PRINCIPAL_SALIR: // 3
                writeLine("Ha sido un placer üòâ");
                break;

            default: // 2a capa de validaci√≥n: que se introduzca una opci√≥n posible
                writeLine("‚ùå Opci√≥n introducida no v√°lida. Introduzca una de las " + OPCION_MENU_PRINCIPAL_SALIR + " opciones posibles.");
                break;
        }
    } while (opcionElegida != OPCION_MENU_PRINCIPAL_SALIR); // se repite siempre y cuando NO se pulse la opci√≥n que sale del programa
}


/*
Se encarga de imprimir el Menu para seleccionar la dificultad del juego, adem√°s de la opci√≥n de mostrar las stats de la sesi√≥n.
Se repite hasta que se selecciona la opcion de volver al men√∫ principal.
En este caso el 'switch' es algo m√°s grande ya que requiere validar si con las stats actuales se puede jugar en esa dificultad.
*/
procedure seleccionarDificultad() {

    int opcionElegida = 0;

    // variables que almacenaran los datos que se mostraran en las estad√≠sticas
    int victoriasFacil = VICTORIAS_INICIALES;
    int victoriasMedio = VICTORIAS_INICIALES;
    int victoriasDificil = VICTORIAS_INICIALES;
    int victoriasMaestro = VICTORIAS_INICIALES;
    int victoriasImposible = VICTORIAS_INICIALES;

    int numeroPartidasFacil = PARTIDAS_INICIALES;
    int numeroPartidasMedio = PARTIDAS_INICIALES;
    int numeroPartidasDificil = PARTIDAS_INICIALES;
    int numeroPartidasMaestro = PARTIDAS_INICIALES;
    int numeroPartidasImposible = PARTIDAS_INICIALES;

    int intentosTotalesFacil = INTENTOS_INICIALES;
    int intentosTotalesMedio = INTENTOS_INICIALES;
    int intentosTotalesDificil = INTENTOS_INICIALES;
    int intentosTotalesMaestro = INTENTOS_INICIALES;
    int intentosTotalesImposible = INTENTOS_INICIALES;

    do {
        // men√∫
        writeLine("---- SELECTOR DE DIFICULTAD ----");
        writeLine(OPCION_MENU_JUEGO_FACIL + ".- F√°cil üòä");
        writeLine(OPCION_MENU_JUEGO_MEDIO + ".- Medio ü§î");
        writeLine(OPCION_MENU_JUEGO_DIFICIL + ".- Dif√≠cil üò®");
        writeLine(OPCION_MENU_JUEGO_MAESTRO + ".- Maestro üë∫");
        writeLine(OPCION_MENU_JUEGO_IMPOSIBLE + ".- Imposible üíÄ");
        writeLine(OPCION_MENU_JUEGO_ESTADISTICAS + ".- Mostrar estad√≠sticas üìä");
        writeLine(OPCION_MENU_JUEGO_SALIR + ".- Volver al men√∫.");

        // 1a capa de validaci√≥n: que no se introduzca texto
        opcionElegida = leerEntero("Opci√≥n elegida: "); 
        writeLine("---------------------");

        // al ser un switch que solo llama a la funcion en caso de que haya ganado en la dificultad anterior se extrae a otra funcion para cumplir el Principio de Responsabilidad √önica.
        gestionarDificultad(opcionElegida);

    } while (opcionElegida != OPCION_MENU_JUEGO_SALIR); // se repite siempre y cuando NO se pulse la opci√≥n que sale del selector de dificultad 
}

/*
Se encarga de llamar a la partida de su respectiva dificultad. 
Se podr√≠a hacer dentro de 'seleccionarDificultad', pero como dentro del switch hay que validar las victorias anteriores queda muy grande y no cumplir√≠a del todo el Principio de Responsabilidad √önica.
Se le pasa por valor la opci√≥n que elige el usuario.
*/
procedure gestionarDificultad(int opcionElegida) {

    // se llama a la respectiva funcion que simula cada dificultad. se le pasa por ref los datos para poder modificarlos y actualizar las stats
    // para desbloquear una dificultad se requiere al menos 1 win en las anteriores, para ello se usan los 'if' que no permiten la simulacion si no se cumple esto
    switch (opcionElegida) {

        case OPCION_MENU_JUEGO_FACIL: // 1
            simularPartidaFacil(ref victoriasFacil, ref numeroPartidasFacil, ref intentosTotalesFacil);
            break;

        case OPCION_MENU_JUEGO_MEDIO: // 2
            if (victoriasFacil >= 1) { // si ha ganado en la difultad anterior
                simularPartidaMedio(ref victoriasMedio, ref numeroPartidasMedio, ref intentosTotalesMedio);
            } else {
                writeLine("‚õì Dificultad bloqueada. Necesitas ganar el la dificultad 'F√°cil' primero.");
            }
            break;

        case OPCION_MENU_JUEGO_DIFICIL: // 3
            if (victoriasMedio >= 1) { // si ha ganado en la difultad anterior
                simularPartidaDificil(ref victoriasDificil, ref numeroPartidasDificil, ref intentosTotalesDificil);
            } else {
                writeLine("‚õì Dificultad bloqueada. Necesitas ganar el la dificultad 'Medio' primero.");
            }
            break;

        case OPCION_MENU_JUEGO_MAESTRO: // 4
            if (victoriasDificil >= 1) { // si ha ganado en la difultad anterior
                simularPartidaMaestro(ref victoriasMaestro, ref numeroPartidasMaestro, ref intentosTotalesMaestro);
            } else {
                writeLine("‚õì Dificultad bloqueada. Necesitas ganar el la dificultad 'Dificil' primero.");
            }
            break;

        case OPCION_MENU_JUEGO_IMPOSIBLE: // 5
            if (victoriasMaestro >= 1) { // si ha ganado en la difultad anterior
                simularPartidaImposible(ref victoriasImposible, ref numeroPartidasImposible, ref intentosTotalesImposible);
            } else {
                writeLine("‚õì Dificultad bloqueada. Necesitas ganar el la dificultad 'Maestro' primero.");
            }
            break;

        case OPCION_MENU_JUEGO_ESTADISTICAS: // 6
            mostrarEstadisticas(ref victoriasFacil, ref numeroPartidasFacil, ref intentosTotalesFacil, 
                                ref victoriasMedio, ref numeroPartidasMedio, ref intentosTotalesMedio, 
                                ref victoriasDificil, ref numeroPartidasDificil, ref intentosTotalesDificil,
                                ref victoriasMaestro, ref numeroPartidasMaestro, ref intentosTotalesMaestro, 
                                ref victoriasImposible, ref numeroPartidasImposible, ref intentosTotalesImposible);
            break;

        case OPCION_MENU_JUEGO_SALIR: // 7
            writeLine("Volviendo al Men√∫ Principal...");
            break;

        default: // 2a capa de validaci√≥n: que se introduzca una opci√≥n posible
            writeLine("‚ùå Opci√≥n introducida no v√°lida. Introduzca una de las " + OPCION_MENU_JUEGO_SALIR + " opciones posibles.");
            break;
    }
}




procedure simularPartidaFacil(ref int victoriasFacil, ref int numeroPartidasFacil, ref int intentosTotalesFacil) {

    // creacion del tablero, matriz rellena de 0
    int [][] panelJuego = int[FILAS_PANEL_FACIL][COLUMNAS_PANEL_FACIL];


}

procedure simularPartidaMedio(ref int victoriasMedio, ref int numeroPartidasMedio, ref int intentosTotalesMedio) {
    
    // creacion del tablero, matriz rellena de 0
    int [][] panelJuego = int[FILAS_PANEL_MEDIO][COLUMNAS_PANEL_MEDIO];


}

procedure simularPartidaDificil(ref int victoriasDificil, ref int numeroPartidasDificil, ref int intentosTotalesDificil) {

    // creacion del tablero, matriz rellena de 0
    int [][] panelJuego = int[FILAS_PANEL_DIFICIL][COLUMNAS_PANEL_d];


}

procedure simularPartidaMaestro(ref int victoriasMaestro, ref int numeroPartidasMaestro, ref int intentosTotalesMaestro) {

    // creacion del tablero, matriz rellena de 0
    int [][] panelJuego = int[FILAS_PANEL_MAESTRO][COLUMNAS_PANEL_MAESTRO];


}

procedure simularPartidaFacil(ref int victoriasFacil, ref int numeroPartidasFacil, ref int intentosTotalesFacil) {

    // creacion del tablero, matriz rellena de 0
    int [][] panelJuego = int[FILAS_PANEL_IMPOSIBLE][COLUMNAS_PANEL_IMPOSIBLE];


}



procedure mostrarInstrucciones() {
    writeLine("...");
}



/*
Se encarga de verificar que un valor pasado por teclado sea un n√∫mero entero. 
En caso de que se introduzca una cadena de texto, el programa atrapa la excepci√≥n y pide de nuevo el dato.
Devuelve el valor le√≠do.
*/
function int leerEntero(string message) {

    int valorLeido = 0;
    bool isFormatoCorrecto = false; //flag

    do {
        writeLine(message);
        try {
            valorLeido = (int)readLine(); 
            isFormatoCorrecto = true;
        } catch (FormatoException e) {
            writeLine("‚ùå Error de formato. Por favor, introduzca un n√∫mero.");
        }
    } while (!isFormatoCorrecto); // se repite hasta que se introduzca un n√∫mero

    return valorLeido; // devuelve el valor leido, no lo hace hasta que sea valido
}

